name: Deploy to Google Play

on:
  push:
    branches: [main]
jobs:
  test:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Grant Execute Permissions from gradlew
        run: chmod +x gradlew

      - name: Run Unit Test
        run: ./gradlew clean testDebug


  distribute:
    name: Distribute bundle to Google Play
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Grant Execute Permissions from gradlew
        run: chmod +x gradlew

      - name: Debug build.gradle.kts content
        run: cat app/build.gradle.kts

      - name: Version Bump
        uses: chkfung/android-version-actions@v1.2.3
        with:
          gradlePath: app/build.gradle.kts
          versionCode: ${{ github.run_number }}

      - name: Assemble Release Bundle
        run: ./gradlew bundleRelease

      - name: Build Release AAB
        run: ./gradlew clean bundleRelease

      - name: List APK files
        run: find app/build/outputs -name "*.apk" -type f

      - name: List AAB files
        run: find app/build/outputs -name "*.aab" -type f


      - name: Sign Release
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          alias: ${{ secrets.ANDROID_DEV_ALIAS }}
          keyPassword: ${{ secrets.ANDROID_DEV_ALIAS_PASSWORD }}

      - name: Verify signed APK exists
        run: |
            echo "Signed APK: ${{ steps.sign_apk.outputs.signedReleaseFile }}"
            ls -la "${{ steps.sign_apk.outputs.signedReleaseFile }}" || echo "APK not found"

      - name: Verify signed AAB exists
        run: |
          echo "Signed AAB: ${{ steps.sign_aab.outputs.signedReleaseFile }}"
          ls -la "${{ steps.sign_aab.outputs.signedReleaseFile }}" || echo "AAB not found"
      

      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFileContent: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
          groups: team
          file: ${{ steps.sign_apk.outputs.signedReleaseFile }}
        env:
          SIGNED_RELEASE_FILE: ${{ steps.sign_apk.outputs.signedReleaseFile }}

#      - name: Setup Authorization with Google Play Store
#        run: echo '${{ secrets.PLAY_AUTH_JSON }}' > service_account.json
#
#      - name: Deploy Bundle on Google Play
#        uses: r0adkll/upload-google-play@v1.1.3
#        with:
#          serviceAccountJson: service_account.json
#          packageName: com.example.multimodulearchitecturepractice
#          releaseFiles: app/build/outputs/bundle/release/app-release.aap
#          track: internal
#          status: completed
#          whatsNewDirectory: whatsNew/